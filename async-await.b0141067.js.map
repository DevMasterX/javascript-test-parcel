{"mappings":"ACoHA,CAAA,iBAIE,IAAM,EAAY,AAFN,CAAC,gBAAiB,SAAU,UAAU,CAE5B,GAAG,CAAC,MAAM,IAC9B,IAAM,EAAW,MAAM,MAAM,uCAAS,GAAS,EAE/C,GAAI,CAAC,KAAK,EAAE,CACV,MAAM,AAAI,MAAM,aAIlB,OAAO,EAAS,IAAI,EACtB,GAGA,OADa,MAAM,QAAQ,UAAU,CAAC,EAExC,CAAA,IAEG,IAAI,CAAC,AAAA,IACJ,IAAM,EAAM,EAAK,MAAM,CAAC,CAAC,CAAA,OAAE,CAAM,CAAE,GAAK,AAAW,cAAX,GAClC,EAAM,EAAK,MAAM,CAAC,CAAC,CAAA,OAAE,CAAM,CAAE,GAAK,AAAW,aAAX,GACxC,QAAQ,GAAG,CAAC,GACZ,QAAQ,GAAG,CAAC,EACd,GACC,KAAK,CAAC,AAAA,GAAS,QAAQ,GAAG,CAAC","sources":["<anon>","src/js/async-await.js"],"sourcesContent":["var $bf0de50c09ec4cb5$exports = {};\nconst $bf0de50c09ec4cb5$var$BASE_URL = 'http://localhost:3000';\n// --------------GET---------------------------------\n// если обрабатываем http запрос только внутри ф - ции и не важно\n// что - то возвращать с данной ф - ции => используем try...catch\nasync function $bf0de50c09ec4cb5$var$getCapital() {\n    try {\n        const URL = 'https://restcountries.com/v3.1/';\n        const resp1 = await fetch(`${URL}Ukraine`);\n        if (!resp1.ok) throw new Error(resp1.statusText);\n        const data = await resp1.json();\n        console.log(data);\n    } catch (e) {\n        console.log(e);\n    }\n}\n// когда с данными работаем за пределами ф - ции =>\n// используем.then().catch();\nasync function $bf0de50c09ec4cb5$var$getCapital() {\n    const URL = 'https://restcountries.com/v3.1/';\n    const resp1 = await fetch(`${URL}Ukraine`);\n    if (!resp1.ok) throw new Error(resp1.statusText);\n    return resp1.json;\n}\n// getCapital()\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error));\n// ----------------------------------------------\nasync function $bf0de50c09ec4cb5$var$fetchBooks() {\n    const response = await fetch(`${$bf0de50c09ec4cb5$var$BASE_URL}/books`);\n    const books = await response.json();\n    return books;\n}\nasync function $bf0de50c09ec4cb5$var$fetchBookById(bookId) {\n    const response = await fetch(`${$bf0de50c09ec4cb5$var$BASE_URL}/books/${bookId}`);\n    const book = await response.json();\n    return book;\n}\n// ---------------------POST----------------------\nasync function $bf0de50c09ec4cb5$var$addBook(book) {\n    const options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(book)\n    };\n    const response = await fetch(`${$bf0de50c09ec4cb5$var$BASE_URL}/books/13`, options);\n    const newBook = await response.json();\n    return new Book();\n}\n// ---------------------DELETE---------------------\nasync function $bf0de50c09ec4cb5$var$removeBook(bookId) {\n    const url = `${$bf0de50c09ec4cb5$var$BASE_URL}/books/${bookId}`;\n    const options = {\n        method: 'DELETE'\n    };\n    const response = await fetch(url, options);\n    const book = await response.json();\n    return book;\n}\n// ---------------------PUT/PATCH----------------------\nasync function $bf0de50c09ec4cb5$var$updateBookById(update, bookId) {\n    const options = {\n        method: 'PATCH',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(update)\n    };\n    const response = await fetch(`${$bf0de50c09ec4cb5$var$BASE_URL}/books/${bookId}`, options);\n    const book = await response.json();\n    return book;\n}\n// ------------------USAGE--------------------------------------\nasync function $bf0de50c09ec4cb5$var$addAndRenderBook() {\n    try {\n        const book = await $bf0de50c09ec4cb5$var$addBook({});\n        console.log(book);\n    } catch (error) {\n        console.log(error);\n    }\n}\n// ---------------------------------------------\n// ----------------ПАРАЛЛЕЛЬНЫЕ ЗАПРОСЫ---------------------\nasync function $bf0de50c09ec4cb5$var$getCapital1() {\n    const URL = 'https://restcountries.com/v3.1/name/';\n    const arr = [\n        'Ukrainerrrrrr',\n        'France',\n        'Germany'\n    ];\n    const responses = arr.map(async (country)=>{\n        const response = await fetch(`${URL}${country}`);\n        if (!resp.ok) throw new Error('Not found');\n        return response.json();\n    });\n    const prom = await Promise.allSettled(responses);\n    return prom;\n}\n$bf0de50c09ec4cb5$var$getCapital1().then((data)=>{\n    const res = data.filter(({ status: status })=>status === 'fulfilled');\n    const rej = data.filter(({ status: status })=>status === 'rejected');\n    console.log(res);\n    console.log(rej);\n}).catch((error)=>console.log(error));\n\n\n//# sourceMappingURL=async-await.b0141067.js.map\n","const BASE_URL = 'http://localhost:3000';\n\n// --------------GET---------------------------------\n\n// если обрабатываем http запрос только внутри ф - ции и не важно\n// что - то возвращать с данной ф - ции => используем try...catch\n\nasync function getCapital() {\n  try {\n    const URL = 'https://restcountries.com/v3.1/';\n    const resp = await fetch(`${URL}Ukraine`);\n    if (!resp.ok) {\n      throw new Error(resp.statusText);\n    }\n    const data = await resp.json();\n    console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// когда с данными работаем за пределами ф - ции =>\n// используем.then().catch();\n\nasync function getCapital() {\n  const URL = 'https://restcountries.com/v3.1/';\n  const resp = await fetch(`${URL}Ukraine`);\n  if (!resp.ok) {\n    throw new Error(resp.statusText);\n  }\n  return resp.json;\n}\n\n// getCapital()\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error));\n\n// ----------------------------------------------\n\nasync function fetchBooks() {\n  const response = await fetch(`${BASE_URL}/books`);\n  const books = await response.json();\n\n  return books;\n}\n\nasync function fetchBookById(bookId) {\n  const response = await fetch(`${BASE_URL}/books/${bookId}`);\n  const book = await response.json();\n\n  return book;\n}\n\n// ---------------------POST----------------------\n\nasync function addBook(book) {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(book),\n  };\n\n  const response = await fetch(`${BASE_URL}/books/13`, options);\n  const newBook = await response.json();\n\n  return new Book();\n}\n\n// ---------------------DELETE---------------------\n\nasync function removeBook(bookId) {\n  const url = `${BASE_URL}/books/${bookId}`;\n  const options = {\n    method: 'DELETE',\n  };\n\n  const response = await fetch(url, options);\n  const book = await response.json();\n\n  return book;\n}\n\n// ---------------------PUT/PATCH----------------------\n\nasync function updateBookById(update, bookId) {\n  const options = {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(update),\n  };\n\n  const response = await fetch(`${BASE_URL}/books/${bookId}`, options);\n  const book = await response.json();\n\n  return book;\n}\n\n// ------------------USAGE--------------------------------------\n\nasync function addAndRenderBook() {\n  try {\n    const book = await addBook({});\n    console.log(book);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// ---------------------------------------------\n\n// ----------------ПАРАЛЛЕЛЬНЫЕ ЗАПРОСЫ---------------------\n\nasync function getCapital1() {\n  const URL = 'https://restcountries.com/v3.1/name/';\n  const arr = ['Ukrainerrrrrr', 'France', 'Germany'];\n\n  const responses = arr.map(async country => {\n    const response = await fetch(`${URL}${country}`);\n\n    if (!resp.ok) {\n      throw new Error('Not found');\n      // Promise.reject('Not found');\n    }\n\n    return response.json();\n  });\n\n  const prom = await Promise.allSettled(responses);\n  return prom;\n}\ngetCapital1()\n  .then(data => {\n    const res = data.filter(({ status }) => status === 'fulfilled');\n    const rej = data.filter(({ status }) => status === 'rejected');\n    console.log(res);\n    console.log(rej);\n  })\n  .catch(error => console.log(error));\n"],"names":["responses","arr","map","country","response","fetch","resp","ok","Error","json","Promise","allSettled","then","data","res","filter","status","rej","console","log","catch","error"],"version":3,"file":"async-await.b0141067.js.map"}