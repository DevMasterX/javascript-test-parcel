{"mappings":"ACwCA,MAAM,EAAU,IAAI,QAAQ,CAAC,EAAS,KACpC,IAAM,EAAa,KAAK,MAAM,GAAK,GAEnC,WAAW,KACL,GACF,EAAQ,kEAGV,EAAO,mDACT,EAAG,IACL,GAEA,EAAQ,IAAI,CAAC,AAAA,IACX,QAAQ,GAAG,CAAC,EACd,GAEA,QAAQ,GAAG,CAAC","sources":["<anon>","src/js/07-promise.js"],"sourcesContent":["var $939ffef877fffcc9$exports = {};\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('Промис выполнился успешно, с результатом исполнен');\n//     }\n//     reject('Промис выполнился с ошибкой');\n//   }, 1000);\n// });\n// // promise.then(onFulfilled, onRejected);\n// function onFulfilled(result) {\n//   console.log(result);\n// }\n// function onRejected(error) {\n//   console.log(error);\n// }\n// promise.then(result => {\n//   console.log(result);\n// });\n// function makePromise() {\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('✅ this is resolve');\n//       }\n//       reject('❌ this is reject');\n//     }, 2000);\n//   });\n// }\n// makePromise()\n//   .then(result => console.log(result))\n//   .catch(error => console.log(error));\nconst $939ffef877fffcc9$var$promise = new Promise((resolve, reject)=>{\n    const canFulfill = Math.random() > 0.5;\n    setTimeout(()=>{\n        if (canFulfill) resolve(\"\\u041F\\u0440\\u043E\\u043C\\u0438\\u0441 \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B\\u0441\\u044F \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441 \\u0440\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442\\u043E\\u043C (\\u0438\\u0441\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D,  fulfilled)\");\n        reject(\"\\u041F\\u0440\\u043E\\u043C\\u0438\\u0441 \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u043B\\u0441\\u044F \\u0441 \\u043E\\u0448\\u0438\\u0431\\u043A\\u043E\\u0439 (\\u043E\\u0442\\u043A\\u043B\\u043E\\u043D\\u0435\\u043D, rejected)\");\n    }, 2000);\n});\n$939ffef877fffcc9$var$promise.then((result)=>{\n    console.log(result);\n});\nconsole.log($939ffef877fffcc9$var$promise);\n\n\n//# sourceMappingURL=07-promise.8b8ddbd3.js.map\n","// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('Промис выполнился успешно, с результатом исполнен');\n//     }\n//     reject('Промис выполнился с ошибкой');\n//   }, 1000);\n// });\n\n// // promise.then(onFulfilled, onRejected);\n\n// function onFulfilled(result) {\n//   console.log(result);\n// }\n\n// function onRejected(error) {\n//   console.log(error);\n// }\n\n// promise.then(result => {\n//   console.log(result);\n// });\n\n// function makePromise() {\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('✅ this is resolve');\n//       }\n//       reject('❌ this is reject');\n//     }, 2000);\n//   });\n// }\n// makePromise()\n//   .then(result => console.log(result))\n//   .catch(error => console.log(error));\nconst promise = new Promise((resolve, reject) => {\n  const canFulfill = Math.random() > 0.5;\n\n  setTimeout(() => {\n    if (canFulfill) {\n      resolve('Промис выполнился успешно с результатом (исполнен,  fulfilled)');\n    }\n\n    reject('Промис выполнился с ошибкой (отклонен, rejected)');\n  }, 2000);\n});\n\npromise.then(result => {\n  console.log(result);\n});\n\nconsole.log(promise);\n"],"names":["$939ffef877fffcc9$var$promise","Promise","resolve","reject","canFulfill","Math","random","setTimeout","then","result","console","log"],"version":3,"file":"07-promise.8b8ddbd3.js.map"}