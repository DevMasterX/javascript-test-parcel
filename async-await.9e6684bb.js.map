{"mappings":"ACkJA,MAAM,EAAa,SAAS,aAAa,CAAC,cACpC,EAAa,SAAS,aAAa,CAAC,WACpC,EAAO,SAAS,aAAa,CAAC,YAC9B,EAAgB,SAAS,aAAa,CAAC,sBACvC,EAAS,sCA8Bf,eAAe,EAAa,CAAG,EAC7B,IAAM,EAAQ,EAAI,GAAG,CAAC,MAAM,IAC1B,IAAM,EAAO,MAAM,MAAM,CAAC,oCAAoC,EAAE,EAAA,CAAM,EACtE,GAAI,CAAC,EAAK,EAAE,CACV,MAAM,AAAI,QAEZ,OAAO,EAAK,IAAI,EAClB,GAOA,MAJmB,AAFN,CAAA,MAAM,QAAQ,UAAU,CAAC,EAAtC,EAGG,MAAM,CAAC,CAAC,CAAA,OAAE,CAAM,CAAE,GAAK,AAAW,cAAX,GACvB,GAAG,CAAC,CAAC,CAAA,MAAE,CAAK,CAAE,GAAK,CAAK,CAAC,EAAE,CAGhC,CAEA,eAAe,EAAW,CAAG,EAI3B,IAAM,EAAQ,EAAI,GAAG,CAAC,MAAM,IAC1B,IAAM,EAAS,IAAI,gBAAgB,CACjC,IAJY,kCAKZ,EAAG,EACH,KAAM,IACR,GAEM,EAAO,MAAM,MAAM,8CAA4B,GAAQ,EAE7D,GAAI,CAAC,EAAK,EAAE,CACV,MAAM,AAAI,MAAM,EAAK,UAAU,EAGjC,OAAO,EAAK,IAAI,EAClB,GAIM,EAAO,AAFA,CAAA,MAAM,QAAQ,UAAU,CAAC,EAAtC,EAGG,MAAM,CAAC,CAAC,CAAA,OAAE,CAAM,CAAE,GAAK,AAAW,cAAX,GACvB,GAAG,CAAC,CAAC,CAAA,MAAE,CAAK,CAAE,GAAK,GAItB,OAFA,QAAQ,GAAG,CAAC,GAEL,CACT,CA1EA,EAAW,gBAAgB,CAAC,QAE5B,WACE,EAAc,kBAAkB,CAAC,YAAa,EAChD,GAEA,EAAW,gBAAgB,CAAC,SAE5B,SAAqB,CAAG,EACtB,EAAI,cAAc,GAMlB,EAJY,AADC,IAAI,SAAS,EAAI,aAAa,EAExC,MAAM,CAAC,WACP,MAAM,CAAC,AAAA,GAAQ,GACf,GAAG,CAAC,AAAA,GAAQ,EAAK,IAAI,KAErB,IAAI,CAAC,MAAM,IACV,IAAM,EAAW,EAAK,GAAG,CAAC,CAAC,CAAA,QAAE,CAAO,CAAE,GAAK,CAAO,CAAC,EAAE,EAC/C,EAAiB,MAAM,EAAW,EACxC,CAAA,EAAK,SAAS,CA0DX,AA1D2B,EA2D/B,GAAG,CACF,CAAC,CACC,QAAS,CAAA,OACP,CAAM,CACN,UAAW,CAAA,KAAE,CAAI,CAAA,KAAE,CAAI,CAAE,CAC1B,CACD,SAAU,CAAA,QAAE,CAAO,CAAA,KAAE,CAAI,CAAE,CAC5B,GAAK,CAAC;A;AAEC,cAAA,EAAE,EAAQ;AACV,cAAA,EAAE,EAAK;AACD,oBAAA,EAAE,EAAK,OAAO,EAAE,EAAK;AAC5B,aAAA,EAAE,EAAK;AACP,aAAA,EAAE,EAAO;A;AAEX,WAAA,CAAC,EAEP,IAAI,CAAC,GA3EN,GACC,KAAK,CAAC,AAAA,GAAK,QAAQ,GAAG,CAAC,IACvB,OAAO,CAAC,KACP,EAAc,SAAS,CAAG,EAC1B,EAAW,KAAK,EAClB,EACJ","sources":["<anon>","src/js/async-await.js"],"sourcesContent":["var $bf0de50c09ec4cb5$exports = {};\nconst $bf0de50c09ec4cb5$var$BASE_URL = 'http://localhost:3000';\n// --------------GET---------------------------------\n// если обрабатываем http запрос только внутри ф - ции и не важно\n// что - то возвращать с данной ф - ции => используем try...catch\nasync function $bf0de50c09ec4cb5$var$getCapital() {\n    try {\n        const URL = 'https://restcountries.com/v3.1/';\n        const resp = await fetch(`${URL}Ukraine`);\n        if (!resp.ok) throw new Error(resp.statusText);\n        const data = await resp.json();\n        console.log(data);\n    } catch (e) {\n        console.log(e);\n    }\n}\n// когда с данными работаем за пределами ф - ции =>\n// используем.then().catch();\nasync function $bf0de50c09ec4cb5$var$getCapital() {\n    const URL = 'https://restcountries.com/v3.1/';\n    const resp = await fetch(`${URL}Ukraine`);\n    if (!resp.ok) throw new Error(resp.statusText);\n    return resp.json;\n}\n// getCapital()\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error));\n// ----------------------------------------------\nasync function $bf0de50c09ec4cb5$var$fetchBooks() {\n    const response = await fetch(`${$bf0de50c09ec4cb5$var$BASE_URL}/books`);\n    const books = await response.json();\n    return books;\n}\nasync function $bf0de50c09ec4cb5$var$fetchBookById(bookId) {\n    const response = await fetch(`${$bf0de50c09ec4cb5$var$BASE_URL}/books/${bookId}`);\n    const book = await response.json();\n    return book;\n}\n// ---------------------POST----------------------\nasync function $bf0de50c09ec4cb5$var$addBook(book) {\n    const options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(book)\n    };\n    const response = await fetch(`${$bf0de50c09ec4cb5$var$BASE_URL}/books/13`, options);\n    const newBook = await response.json();\n    return new Book();\n}\n// ---------------------DELETE---------------------\nasync function $bf0de50c09ec4cb5$var$removeBook(bookId) {\n    const url = `${$bf0de50c09ec4cb5$var$BASE_URL}/books/${bookId}`;\n    const options = {\n        method: 'DELETE'\n    };\n    const response = await fetch(url, options);\n    const book = await response.json();\n    return book;\n}\n// ---------------------PUT/PATCH----------------------\nasync function $bf0de50c09ec4cb5$var$updateBookById(update, bookId) {\n    const options = {\n        method: 'PATCH',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(update)\n    };\n    const response = await fetch(`${$bf0de50c09ec4cb5$var$BASE_URL}/books/${bookId}`, options);\n    const book = await response.json();\n    return book;\n}\n// ------------------USAGE--------------------------------------\nasync function $bf0de50c09ec4cb5$var$addAndRenderBook() {\n    try {\n        const book = await $bf0de50c09ec4cb5$var$addBook({});\n        console.log(book);\n    } catch (error) {\n        console.log(error);\n    }\n}\n// ---------------------------------------------\n// ----------------ПАРАЛЛЕЛЬНЫЕ ЗАПРОСЫ---------------------\nasync function $bf0de50c09ec4cb5$var$getCapital1() {\n    const URL = 'https://restcountries.com/v3.1/name/';\n    const arr = [\n        'Ukraine',\n        'France',\n        'Germany'\n    ];\n    const responses = arr.map(async (country)=>{\n        const response = await fetch(`${URL}${country}`);\n        if (!response.ok) throw new Error('Not found');\n        return response.json();\n    });\n    const prom = await Promise.allSettled(responses);\n    return prom;\n}\n// getCapital1()\n//   .then(data => {\n//     const res = data\n//       .filter(({ status }) => status === 'fulfilled')\n//       .map(({ value }) => value[0]);\n//     const rej = data.filter(({ status }) => status === 'rejected');\n//   })\n//   .catch(error => console.log(error));\n// ---------------------------------------------\nconst $bf0de50c09ec4cb5$var$searchForm = document.querySelector('.js-search');\nconst $bf0de50c09ec4cb5$var$addCountry = document.querySelector('.js-add');\nconst $bf0de50c09ec4cb5$var$list = document.querySelector('.js-list');\nconst $bf0de50c09ec4cb5$var$formContainer = document.querySelector('.js-form-container');\nconst $bf0de50c09ec4cb5$var$markup = '<input type=\"text\" name=\"country\"/>';\n$bf0de50c09ec4cb5$var$addCountry.addEventListener('click', $bf0de50c09ec4cb5$var$handlerAddInput);\nfunction $bf0de50c09ec4cb5$var$handlerAddInput() {\n    $bf0de50c09ec4cb5$var$formContainer.insertAdjacentHTML('beforeend', $bf0de50c09ec4cb5$var$markup);\n}\n$bf0de50c09ec4cb5$var$searchForm.addEventListener('submit', $bf0de50c09ec4cb5$var$handlerForm);\nfunction $bf0de50c09ec4cb5$var$handlerForm(evt) {\n    evt.preventDefault();\n    const data = new FormData(evt.currentTarget);\n    const arr = data.getAll('country').filter((item)=>item).map((item)=>item.trim());\n    $bf0de50c09ec4cb5$var$getCountries(arr).then(async (resp)=>{\n        const capitals = resp.map(({ capital: capital })=>capital[0]);\n        const weatherService = await $bf0de50c09ec4cb5$var$getWeather(capitals);\n        $bf0de50c09ec4cb5$var$list.innerHTML = $bf0de50c09ec4cb5$var$createMarkup(weatherService);\n    }).catch((e)=>console.log(e)).finally(()=>{\n        $bf0de50c09ec4cb5$var$formContainer.innerHTML = $bf0de50c09ec4cb5$var$markup;\n        $bf0de50c09ec4cb5$var$searchForm.reset();\n    });\n}\nasync function $bf0de50c09ec4cb5$var$getCountries(arr) {\n    const resps = arr.map(async (item)=>{\n        const resp = await fetch(`https://restcountries.com/v3.1/name/${item}`);\n        if (!resp.ok) throw new Error();\n        return resp.json();\n    });\n    const data = await Promise.allSettled(resps);\n    const countryObj = data.filter(({ status: status })=>status === 'fulfilled').map(({ value: value })=>value[0]);\n    return countryObj;\n}\nasync function $bf0de50c09ec4cb5$var$getWeather(arr) {\n    const BASE_URL = 'https://api.weatherapi.com/v1';\n    const API_KEY = '1f583b8645b54c449e5214937241512';\n    const resps = arr.map(async (city)=>{\n        const params = new URLSearchParams({\n            key: API_KEY,\n            q: city,\n            lang: 'uk'\n        });\n        const resp = await fetch(`${BASE_URL}/current.json?${params}`);\n        if (!resp.ok) throw new Error(resp.statusText);\n        return resp.json();\n    });\n    const data = await Promise.allSettled(resps);\n    const objs = data.filter(({ status: status })=>status === 'fulfilled').map(({ value: value })=>value);\n    console.log(objs);\n    return objs;\n}\nfunction $bf0de50c09ec4cb5$var$createMarkup(arr) {\n    return arr.map(({ current: { temp_c: temp_c, condition: { text: text, icon: icon } }, location: { country: country, name: name } })=>`  <li>\n        <div>\n          <h2>${country}</h2>\n          <h3>${name}</h3>\n          <img src=\"${icon}\" alt=\"${text}\" />\n          <p>${text}</p>\n          <p>${temp_c}</p>\n        </div>\n      </li>`).join('');\n// body\n}\n\n\n//# sourceMappingURL=async-await.9e6684bb.js.map\n","const BASE_URL = 'http://localhost:3000';\n\n// --------------GET---------------------------------\n\n// если обрабатываем http запрос только внутри ф - ции и не важно\n// что - то возвращать с данной ф - ции => используем try...catch\n\nasync function getCapital() {\n  try {\n    const URL = 'https://restcountries.com/v3.1/';\n    const resp = await fetch(`${URL}Ukraine`);\n    if (!resp.ok) {\n      throw new Error(resp.statusText);\n    }\n    const data = await resp.json();\n    console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// когда с данными работаем за пределами ф - ции =>\n// используем.then().catch();\n\nasync function getCapital() {\n  const URL = 'https://restcountries.com/v3.1/';\n  const resp = await fetch(`${URL}Ukraine`);\n  if (!resp.ok) {\n    throw new Error(resp.statusText);\n  }\n  return resp.json;\n}\n\n// getCapital()\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error));\n\n// ----------------------------------------------\n\nasync function fetchBooks() {\n  const response = await fetch(`${BASE_URL}/books`);\n  const books = await response.json();\n\n  return books;\n}\n\nasync function fetchBookById(bookId) {\n  const response = await fetch(`${BASE_URL}/books/${bookId}`);\n  const book = await response.json();\n\n  return book;\n}\n\n// ---------------------POST----------------------\n\nasync function addBook(book) {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(book),\n  };\n\n  const response = await fetch(`${BASE_URL}/books/13`, options);\n  const newBook = await response.json();\n\n  return new Book();\n}\n\n// ---------------------DELETE---------------------\n\nasync function removeBook(bookId) {\n  const url = `${BASE_URL}/books/${bookId}`;\n  const options = {\n    method: 'DELETE',\n  };\n\n  const response = await fetch(url, options);\n  const book = await response.json();\n\n  return book;\n}\n\n// ---------------------PUT/PATCH----------------------\n\nasync function updateBookById(update, bookId) {\n  const options = {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(update),\n  };\n\n  const response = await fetch(`${BASE_URL}/books/${bookId}`, options);\n  const book = await response.json();\n\n  return book;\n}\n\n// ------------------USAGE--------------------------------------\n\nasync function addAndRenderBook() {\n  try {\n    const book = await addBook({});\n    console.log(book);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// ---------------------------------------------\n\n// ----------------ПАРАЛЛЕЛЬНЫЕ ЗАПРОСЫ---------------------\n\nasync function getCapital1() {\n  const URL = 'https://restcountries.com/v3.1/name/';\n  const arr = ['Ukraine', 'France', 'Germany'];\n\n  const responses = arr.map(async country => {\n    const response = await fetch(`${URL}${country}`);\n\n    if (!response.ok) {\n      throw new Error('Not found');\n      // Promise.reject('Not found');\n    }\n\n    return response.json();\n  });\n\n  const prom = await Promise.allSettled(responses);\n  return prom;\n}\n// getCapital1()\n//   .then(data => {\n//     const res = data\n//       .filter(({ status }) => status === 'fulfilled')\n//       .map(({ value }) => value[0]);\n//     const rej = data.filter(({ status }) => status === 'rejected');\n\n//   })\n//   .catch(error => console.log(error));\n\n// ---------------------------------------------\n\nconst searchForm = document.querySelector('.js-search');\nconst addCountry = document.querySelector('.js-add');\nconst list = document.querySelector('.js-list');\nconst formContainer = document.querySelector('.js-form-container');\nconst markup = '<input type=\"text\" name=\"country\"/>';\n\naddCountry.addEventListener('click', handlerAddInput);\n\nfunction handlerAddInput() {\n  formContainer.insertAdjacentHTML('beforeend', markup);\n}\n\nsearchForm.addEventListener('submit', handlerForm);\n\nfunction handlerForm(evt) {\n  evt.preventDefault();\n  const data = new FormData(evt.currentTarget);\n  const arr = data\n    .getAll('country')\n    .filter(item => item)\n    .map(item => item.trim());\n  getCountries(arr)\n    .then(async resp => {\n      const capitals = resp.map(({ capital }) => capital[0]);\n      const weatherService = await getWeather(capitals);\n      list.innerHTML = createMarkup(weatherService);\n    })\n    .catch(e => console.log(e))\n    .finally(() => {\n      formContainer.innerHTML = markup;\n      searchForm.reset();\n    });\n}\n\nasync function getCountries(arr) {\n  const resps = arr.map(async item => {\n    const resp = await fetch(`https://restcountries.com/v3.1/name/${item}`);\n    if (!resp.ok) {\n      throw new Error();\n    }\n    return resp.json();\n  });\n  const data = await Promise.allSettled(resps);\n\n  const countryObj = data\n    .filter(({ status }) => status === 'fulfilled')\n    .map(({ value }) => value[0]);\n\n  return countryObj;\n}\n\nasync function getWeather(arr) {\n  const BASE_URL = 'https://api.weatherapi.com/v1';\n  const API_KEY = '1f583b8645b54c449e5214937241512';\n\n  const resps = arr.map(async city => {\n    const params = new URLSearchParams({\n      key: API_KEY,\n      q: city,\n      lang: 'uk',\n    });\n\n    const resp = await fetch(`${BASE_URL}/current.json?${params}`);\n\n    if (!resp.ok) {\n      throw new Error(resp.statusText);\n    }\n\n    return resp.json();\n  });\n\n  const data = await Promise.allSettled(resps);\n\n  const objs = data\n    .filter(({ status }) => status === 'fulfilled')\n    .map(({ value }) => value);\n\n  console.log(objs);\n\n  return objs;\n}\n\nfunction createMarkup(arr) {\n  return arr\n    .map(\n      ({\n        current: {\n          temp_c,\n          condition: { text, icon },\n        },\n        location: { country, name },\n      }) => `  <li>\n        <div>\n          <h2>${country}</h2>\n          <h3>${name}</h3>\n          <img src=\"${icon}\" alt=\"${text}\" />\n          <p>${text}</p>\n          <p>${temp_c}</p>\n        </div>\n      </li>`\n    )\n    .join('');\n  // body\n}\n"],"names":["$bf0de50c09ec4cb5$var$searchForm","document","querySelector","$bf0de50c09ec4cb5$var$addCountry","$bf0de50c09ec4cb5$var$list","$bf0de50c09ec4cb5$var$formContainer","$bf0de50c09ec4cb5$var$markup","$bf0de50c09ec4cb5$var$getCountries","arr","resps","map","item","resp","fetch","ok","Error","json","data","Promise","allSettled","filter","status","value","$bf0de50c09ec4cb5$var$getWeather","city","params","URLSearchParams","key","q","lang","statusText","objs","console","log","addEventListener","insertAdjacentHTML","evt","preventDefault","FormData","currentTarget","getAll","trim","then","capitals","capital","weatherService","innerHTML","current","temp_c","condition","text","icon","location","country","name","join","catch","e","finally","reset"],"version":3,"file":"async-await.9e6684bb.js.map"}